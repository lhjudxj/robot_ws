// Generated by gencpp from file ranger_msgs/ActuatorState.msg
// DO NOT EDIT!


#ifndef RANGER_MSGS_MESSAGE_ACTUATORSTATE_H
#define RANGER_MSGS_MESSAGE_ACTUATORSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ranger_msgs/MotorState.h>
#include <ranger_msgs/DriverState.h>

namespace ranger_msgs
{
template <class ContainerAllocator>
struct ActuatorState_
{
  typedef ActuatorState_<ContainerAllocator> Type;

  ActuatorState_()
    : id(0)
    , motor()
    , driver()  {
    }
  ActuatorState_(const ContainerAllocator& _alloc)
    : id(0)
    , motor(_alloc)
    , driver(_alloc)  {
  (void)_alloc;
    }



   typedef uint32_t _id_type;
  _id_type id;

   typedef  ::ranger_msgs::MotorState_<ContainerAllocator>  _motor_type;
  _motor_type motor;

   typedef  ::ranger_msgs::DriverState_<ContainerAllocator>  _driver_type;
  _driver_type driver;





  typedef boost::shared_ptr< ::ranger_msgs::ActuatorState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ranger_msgs::ActuatorState_<ContainerAllocator> const> ConstPtr;

}; // struct ActuatorState_

typedef ::ranger_msgs::ActuatorState_<std::allocator<void> > ActuatorState;

typedef boost::shared_ptr< ::ranger_msgs::ActuatorState > ActuatorStatePtr;
typedef boost::shared_ptr< ::ranger_msgs::ActuatorState const> ActuatorStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ranger_msgs::ActuatorState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ranger_msgs::ActuatorState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ranger_msgs::ActuatorState_<ContainerAllocator1> & lhs, const ::ranger_msgs::ActuatorState_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.motor == rhs.motor &&
    lhs.driver == rhs.driver;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ranger_msgs::ActuatorState_<ContainerAllocator1> & lhs, const ::ranger_msgs::ActuatorState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ranger_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ranger_msgs::ActuatorState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ranger_msgs::ActuatorState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ranger_msgs::ActuatorState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ranger_msgs::ActuatorState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ranger_msgs::ActuatorState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ranger_msgs::ActuatorState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ranger_msgs::ActuatorState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ac625266ba0e0f3a4c2bd178030b5daf";
  }

  static const char* value(const ::ranger_msgs::ActuatorState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xac625266ba0e0f3aULL;
  static const uint64_t static_value2 = 0x4c2bd178030b5dafULL;
};

template<class ContainerAllocator>
struct DataType< ::ranger_msgs::ActuatorState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ranger_msgs/ActuatorState";
  }

  static const char* value(const ::ranger_msgs::ActuatorState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ranger_msgs::ActuatorState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 id\n"
"MotorState motor\n"
"DriverState driver\n"
"\n"
"================================================================================\n"
"MSG: ranger_msgs/MotorState\n"
"int32 rpm\n"
"float32 current\n"
"int32 pulse_count\n"
"================================================================================\n"
"MSG: ranger_msgs/DriverState\n"
"float32 driver_voltage\n"
"float32 driver_temperature\n"
"float32 motor_temperature\n"
"uint32 driver_state\n"
;
  }

  static const char* value(const ::ranger_msgs::ActuatorState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ranger_msgs::ActuatorState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.motor);
      stream.next(m.driver);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ActuatorState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ranger_msgs::ActuatorState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ranger_msgs::ActuatorState_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.id);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "motor: ";
    Printer< ::ranger_msgs::MotorState_<ContainerAllocator> >::stream(s, indent + "  ", v.motor);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "driver: ";
    Printer< ::ranger_msgs::DriverState_<ContainerAllocator> >::stream(s, indent + "  ", v.driver);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RANGER_MSGS_MESSAGE_ACTUATORSTATE_H
