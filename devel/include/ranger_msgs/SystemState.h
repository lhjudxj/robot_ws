// Generated by gencpp from file ranger_msgs/SystemState.msg
// DO NOT EDIT!


#ifndef RANGER_MSGS_MESSAGE_SYSTEMSTATE_H
#define RANGER_MSGS_MESSAGE_SYSTEMSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace ranger_msgs
{
template <class ContainerAllocator>
struct SystemState_
{
  typedef SystemState_<ContainerAllocator> Type;

  SystemState_()
    : header()
    , vehicle_state(0)
    , control_mode(0)
    , error_code(0)
    , battery_voltage(0.0)
    , motion_mode(0)  {
    }
  SystemState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , vehicle_state(0)
    , control_mode(0)
    , error_code(0)
    , battery_voltage(0.0)
    , motion_mode(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _vehicle_state_type;
  _vehicle_state_type vehicle_state;

   typedef uint8_t _control_mode_type;
  _control_mode_type control_mode;

   typedef uint16_t _error_code_type;
  _error_code_type error_code;

   typedef double _battery_voltage_type;
  _battery_voltage_type battery_voltage;

   typedef uint8_t _motion_mode_type;
  _motion_mode_type motion_mode;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(VEHICLE_STATE_NORMAL)
  #undef VEHICLE_STATE_NORMAL
#endif
#if defined(_WIN32) && defined(VEHICLE_STATE_ESTOP)
  #undef VEHICLE_STATE_ESTOP
#endif
#if defined(_WIN32) && defined(VEHICLE_STATE_EXCEPTION)
  #undef VEHICLE_STATE_EXCEPTION
#endif
#if defined(_WIN32) && defined(CONTROL_MODE_RC)
  #undef CONTROL_MODE_RC
#endif
#if defined(_WIN32) && defined(CONTROL_MODE_CAN)
  #undef CONTROL_MODE_CAN
#endif
#if defined(_WIN32) && defined(MOTION_MODE_DUAL_ACKERMAN)
  #undef MOTION_MODE_DUAL_ACKERMAN
#endif
#if defined(_WIN32) && defined(MOTION_MODE_PARALLEL)
  #undef MOTION_MODE_PARALLEL
#endif
#if defined(_WIN32) && defined(MOTION_MODE_SPINNING)
  #undef MOTION_MODE_SPINNING
#endif
#if defined(_WIN32) && defined(MOTION_MODE_PARKING)
  #undef MOTION_MODE_PARKING
#endif
#if defined(_WIN32) && defined(MOTION_MODE_SIDE_SLIP)
  #undef MOTION_MODE_SIDE_SLIP
#endif

  enum {
    VEHICLE_STATE_NORMAL = 0u,
    VEHICLE_STATE_ESTOP = 1u,
    VEHICLE_STATE_EXCEPTION = 2u,
    CONTROL_MODE_RC = 0u,
    CONTROL_MODE_CAN = 1u,
    MOTION_MODE_DUAL_ACKERMAN = 0u,
    MOTION_MODE_PARALLEL = 1u,
    MOTION_MODE_SPINNING = 2u,
    MOTION_MODE_PARKING = 3u,
    MOTION_MODE_SIDE_SLIP = 4u,
  };


  typedef boost::shared_ptr< ::ranger_msgs::SystemState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ranger_msgs::SystemState_<ContainerAllocator> const> ConstPtr;

}; // struct SystemState_

typedef ::ranger_msgs::SystemState_<std::allocator<void> > SystemState;

typedef boost::shared_ptr< ::ranger_msgs::SystemState > SystemStatePtr;
typedef boost::shared_ptr< ::ranger_msgs::SystemState const> SystemStateConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ranger_msgs::SystemState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ranger_msgs::SystemState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ranger_msgs::SystemState_<ContainerAllocator1> & lhs, const ::ranger_msgs::SystemState_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.vehicle_state == rhs.vehicle_state &&
    lhs.control_mode == rhs.control_mode &&
    lhs.error_code == rhs.error_code &&
    lhs.battery_voltage == rhs.battery_voltage &&
    lhs.motion_mode == rhs.motion_mode;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ranger_msgs::SystemState_<ContainerAllocator1> & lhs, const ::ranger_msgs::SystemState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ranger_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ranger_msgs::SystemState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ranger_msgs::SystemState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ranger_msgs::SystemState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ranger_msgs::SystemState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ranger_msgs::SystemState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ranger_msgs::SystemState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ranger_msgs::SystemState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "166b36aa3b97238713c3ccc3ca9d63d1";
  }

  static const char* value(const ::ranger_msgs::SystemState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x166b36aa3b972387ULL;
  static const uint64_t static_value2 = 0x13c3ccc3ca9d63d1ULL;
};

template<class ContainerAllocator>
struct DataType< ::ranger_msgs::SystemState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ranger_msgs/SystemState";
  }

  static const char* value(const ::ranger_msgs::SystemState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ranger_msgs::SystemState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 VEHICLE_STATE_NORMAL = 0\n"
"uint8 VEHICLE_STATE_ESTOP = 1\n"
"uint8 VEHICLE_STATE_EXCEPTION = 2\n"
"\n"
"uint8 CONTROL_MODE_RC = 0\n"
"uint8 CONTROL_MODE_CAN = 1\n"
"\n"
"uint8 MOTION_MODE_DUAL_ACKERMAN = 0\n"
"uint8 MOTION_MODE_PARALLEL = 1\n"
"uint8 MOTION_MODE_SPINNING = 2\n"
"uint8 MOTION_MODE_PARKING = 3\n"
"uint8 MOTION_MODE_SIDE_SLIP = 4\n"
"\n"
"########################################\n"
"\n"
"Header header\n"
"\n"
"# system state\n"
"uint8 vehicle_state\n"
"uint8 control_mode\n"
"uint16 error_code\n"
"float64 battery_voltage\n"
"\n"
"# motion state\n"
"uint8 motion_mode\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::ranger_msgs::SystemState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ranger_msgs::SystemState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.vehicle_state);
      stream.next(m.control_mode);
      stream.next(m.error_code);
      stream.next(m.battery_voltage);
      stream.next(m.motion_mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SystemState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ranger_msgs::SystemState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ranger_msgs::SystemState_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "header: ";
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "vehicle_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.vehicle_state);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "control_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.control_mode);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "error_code: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.error_code);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "battery_voltage: ";
    Printer<double>::stream(s, indent + "  ", v.battery_voltage);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "motion_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.motion_mode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RANGER_MSGS_MESSAGE_SYSTEMSTATE_H
