// Generated by gencpp from file ranger_msgs/ActuatorStateArray.msg
// DO NOT EDIT!


#ifndef RANGER_MSGS_MESSAGE_ACTUATORSTATEARRAY_H
#define RANGER_MSGS_MESSAGE_ACTUATORSTATEARRAY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <ranger_msgs/ActuatorState.h>

namespace ranger_msgs
{
template <class ContainerAllocator>
struct ActuatorStateArray_
{
  typedef ActuatorStateArray_<ContainerAllocator> Type;

  ActuatorStateArray_()
    : header()
    , states()  {
    }
  ActuatorStateArray_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , states(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::ranger_msgs::ActuatorState_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ranger_msgs::ActuatorState_<ContainerAllocator> >> _states_type;
  _states_type states;





  typedef boost::shared_ptr< ::ranger_msgs::ActuatorStateArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ranger_msgs::ActuatorStateArray_<ContainerAllocator> const> ConstPtr;

}; // struct ActuatorStateArray_

typedef ::ranger_msgs::ActuatorStateArray_<std::allocator<void> > ActuatorStateArray;

typedef boost::shared_ptr< ::ranger_msgs::ActuatorStateArray > ActuatorStateArrayPtr;
typedef boost::shared_ptr< ::ranger_msgs::ActuatorStateArray const> ActuatorStateArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ranger_msgs::ActuatorStateArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ranger_msgs::ActuatorStateArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ranger_msgs::ActuatorStateArray_<ContainerAllocator1> & lhs, const ::ranger_msgs::ActuatorStateArray_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.states == rhs.states;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ranger_msgs::ActuatorStateArray_<ContainerAllocator1> & lhs, const ::ranger_msgs::ActuatorStateArray_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ranger_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ranger_msgs::ActuatorStateArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ranger_msgs::ActuatorStateArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ranger_msgs::ActuatorStateArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ranger_msgs::ActuatorStateArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ranger_msgs::ActuatorStateArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ranger_msgs::ActuatorStateArray_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ranger_msgs::ActuatorStateArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c27e592efdd1087f3e73e2d4f7935864";
  }

  static const char* value(const ::ranger_msgs::ActuatorStateArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc27e592efdd1087fULL;
  static const uint64_t static_value2 = 0x3e73e2d4f7935864ULL;
};

template<class ContainerAllocator>
struct DataType< ::ranger_msgs::ActuatorStateArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ranger_msgs/ActuatorStateArray";
  }

  static const char* value(const ::ranger_msgs::ActuatorStateArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ranger_msgs::ActuatorStateArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"ActuatorState[] states\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: ranger_msgs/ActuatorState\n"
"uint32 id\n"
"MotorState motor\n"
"DriverState driver\n"
"\n"
"================================================================================\n"
"MSG: ranger_msgs/MotorState\n"
"int32 rpm\n"
"float32 current\n"
"int32 pulse_count\n"
"================================================================================\n"
"MSG: ranger_msgs/DriverState\n"
"float32 driver_voltage\n"
"float32 driver_temperature\n"
"float32 motor_temperature\n"
"uint32 driver_state\n"
;
  }

  static const char* value(const ::ranger_msgs::ActuatorStateArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ranger_msgs::ActuatorStateArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.states);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ActuatorStateArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ranger_msgs::ActuatorStateArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ranger_msgs::ActuatorStateArray_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "header: ";
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "states: ";
    if (v.states.empty() || false)
      s << "[";
    for (size_t i = 0; i < v.states.size(); ++i)
    {
      if (false && i > 0)
        s << ", ";
      else if (!false)
        s << std::endl << indent << "  -";
      Printer< ::ranger_msgs::ActuatorState_<ContainerAllocator> >::stream(s, false ? std::string() : indent + "    ", v.states[i]);
    }
    if (v.states.empty() || false)
      s << "]";
  }
};

} // namespace message_operations
} // namespace ros

#endif // RANGER_MSGS_MESSAGE_ACTUATORSTATEARRAY_H
