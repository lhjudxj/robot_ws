// Generated by gencpp from file ranger_msgs/DriverState.msg
// DO NOT EDIT!


#ifndef RANGER_MSGS_MESSAGE_DRIVERSTATE_H
#define RANGER_MSGS_MESSAGE_DRIVERSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ranger_msgs
{
template <class ContainerAllocator>
struct DriverState_
{
  typedef DriverState_<ContainerAllocator> Type;

  DriverState_()
    : driver_voltage(0.0)
    , driver_temperature(0.0)
    , motor_temperature(0.0)
    , driver_state(0)  {
    }
  DriverState_(const ContainerAllocator& _alloc)
    : driver_voltage(0.0)
    , driver_temperature(0.0)
    , motor_temperature(0.0)
    , driver_state(0)  {
  (void)_alloc;
    }



   typedef float _driver_voltage_type;
  _driver_voltage_type driver_voltage;

   typedef float _driver_temperature_type;
  _driver_temperature_type driver_temperature;

   typedef float _motor_temperature_type;
  _motor_temperature_type motor_temperature;

   typedef uint32_t _driver_state_type;
  _driver_state_type driver_state;





  typedef boost::shared_ptr< ::ranger_msgs::DriverState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ranger_msgs::DriverState_<ContainerAllocator> const> ConstPtr;

}; // struct DriverState_

typedef ::ranger_msgs::DriverState_<std::allocator<void> > DriverState;

typedef boost::shared_ptr< ::ranger_msgs::DriverState > DriverStatePtr;
typedef boost::shared_ptr< ::ranger_msgs::DriverState const> DriverStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ranger_msgs::DriverState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ranger_msgs::DriverState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ranger_msgs::DriverState_<ContainerAllocator1> & lhs, const ::ranger_msgs::DriverState_<ContainerAllocator2> & rhs)
{
  return lhs.driver_voltage == rhs.driver_voltage &&
    lhs.driver_temperature == rhs.driver_temperature &&
    lhs.motor_temperature == rhs.motor_temperature &&
    lhs.driver_state == rhs.driver_state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ranger_msgs::DriverState_<ContainerAllocator1> & lhs, const ::ranger_msgs::DriverState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ranger_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ranger_msgs::DriverState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ranger_msgs::DriverState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ranger_msgs::DriverState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ranger_msgs::DriverState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ranger_msgs::DriverState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ranger_msgs::DriverState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ranger_msgs::DriverState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e5e7f5fd1e7cc0bd7398225868b7037f";
  }

  static const char* value(const ::ranger_msgs::DriverState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe5e7f5fd1e7cc0bdULL;
  static const uint64_t static_value2 = 0x7398225868b7037fULL;
};

template<class ContainerAllocator>
struct DataType< ::ranger_msgs::DriverState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ranger_msgs/DriverState";
  }

  static const char* value(const ::ranger_msgs::DriverState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ranger_msgs::DriverState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 driver_voltage\n"
"float32 driver_temperature\n"
"float32 motor_temperature\n"
"uint32 driver_state\n"
;
  }

  static const char* value(const ::ranger_msgs::DriverState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ranger_msgs::DriverState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.driver_voltage);
      stream.next(m.driver_temperature);
      stream.next(m.motor_temperature);
      stream.next(m.driver_state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DriverState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ranger_msgs::DriverState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ranger_msgs::DriverState_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "driver_voltage: ";
    Printer<float>::stream(s, indent + "  ", v.driver_voltage);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "driver_temperature: ";
    Printer<float>::stream(s, indent + "  ", v.driver_temperature);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "motor_temperature: ";
    Printer<float>::stream(s, indent + "  ", v.motor_temperature);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "driver_state: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.driver_state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RANGER_MSGS_MESSAGE_DRIVERSTATE_H
