// Generated by gencpp from file ranger_msgs/MotorState.msg
// DO NOT EDIT!


#ifndef RANGER_MSGS_MESSAGE_MOTORSTATE_H
#define RANGER_MSGS_MESSAGE_MOTORSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ranger_msgs
{
template <class ContainerAllocator>
struct MotorState_
{
  typedef MotorState_<ContainerAllocator> Type;

  MotorState_()
    : rpm(0)
    , current(0.0)
    , pulse_count(0)  {
    }
  MotorState_(const ContainerAllocator& _alloc)
    : rpm(0)
    , current(0.0)
    , pulse_count(0)  {
  (void)_alloc;
    }



   typedef int32_t _rpm_type;
  _rpm_type rpm;

   typedef float _current_type;
  _current_type current;

   typedef int32_t _pulse_count_type;
  _pulse_count_type pulse_count;





  typedef boost::shared_ptr< ::ranger_msgs::MotorState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ranger_msgs::MotorState_<ContainerAllocator> const> ConstPtr;

}; // struct MotorState_

typedef ::ranger_msgs::MotorState_<std::allocator<void> > MotorState;

typedef boost::shared_ptr< ::ranger_msgs::MotorState > MotorStatePtr;
typedef boost::shared_ptr< ::ranger_msgs::MotorState const> MotorStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ranger_msgs::MotorState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ranger_msgs::MotorState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ranger_msgs::MotorState_<ContainerAllocator1> & lhs, const ::ranger_msgs::MotorState_<ContainerAllocator2> & rhs)
{
  return lhs.rpm == rhs.rpm &&
    lhs.current == rhs.current &&
    lhs.pulse_count == rhs.pulse_count;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ranger_msgs::MotorState_<ContainerAllocator1> & lhs, const ::ranger_msgs::MotorState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ranger_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ranger_msgs::MotorState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ranger_msgs::MotorState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ranger_msgs::MotorState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ranger_msgs::MotorState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ranger_msgs::MotorState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ranger_msgs::MotorState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ranger_msgs::MotorState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4f0afbdb08d903468630312c9e20a600";
  }

  static const char* value(const ::ranger_msgs::MotorState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4f0afbdb08d90346ULL;
  static const uint64_t static_value2 = 0x8630312c9e20a600ULL;
};

template<class ContainerAllocator>
struct DataType< ::ranger_msgs::MotorState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ranger_msgs/MotorState";
  }

  static const char* value(const ::ranger_msgs::MotorState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ranger_msgs::MotorState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 rpm\n"
"float32 current\n"
"int32 pulse_count\n"
;
  }

  static const char* value(const ::ranger_msgs::MotorState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ranger_msgs::MotorState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.rpm);
      stream.next(m.current);
      stream.next(m.pulse_count);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MotorState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ranger_msgs::MotorState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ranger_msgs::MotorState_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "rpm: ";
    Printer<int32_t>::stream(s, indent + "  ", v.rpm);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "current: ";
    Printer<float>::stream(s, indent + "  ", v.current);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "pulse_count: ";
    Printer<int32_t>::stream(s, indent + "  ", v.pulse_count);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RANGER_MSGS_MESSAGE_MOTORSTATE_H
