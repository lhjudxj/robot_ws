# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ranger_msgs/BatteryState.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import std_msgs.msg

class BatteryState(genpy.Message):
  _md5sum = "bc309a16f190963f18bd624421013d65"
  _type = "ranger_msgs/BatteryState"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """uint8 POWER_SUPPLY_STATUS_UNKNOWN=0
uint8 POWER_SUPPLY_STATUS_CHARGING=1
uint8 POWER_SUPPLY_STATUS_DISCHARGING=2
uint8 POWER_SUPPLY_STATUS_NOT_CHARGING=3
uint8 POWER_SUPPLY_STATUS_FULL=4
uint8 POWER_SUPPLY_HEALTH_UNKNOWN=0
uint8 POWER_SUPPLY_HEALTH_GOOD=1
uint8 POWER_SUPPLY_HEALTH_OVERHEAT=2
uint8 POWER_SUPPLY_HEALTH_DEAD=3
uint8 POWER_SUPPLY_HEALTH_OVERVOLTAGE=4
uint8 POWER_SUPPLY_HEALTH_UNSPEC_FAILURE=5
uint8 POWER_SUPPLY_HEALTH_COLD=6
uint8 POWER_SUPPLY_HEALTH_WATCHDOG_TIMER_EXPIRE=7
uint8 POWER_SUPPLY_HEALTH_SAFETY_TIMER_EXPIRE=8
uint8 POWER_SUPPLY_TECHNOLOGY_UNKNOWN=0
uint8 POWER_SUPPLY_TECHNOLOGY_NIMH=1
uint8 POWER_SUPPLY_TECHNOLOGY_LION=2
uint8 POWER_SUPPLY_TECHNOLOGY_LIPO=3
uint8 POWER_SUPPLY_TECHNOLOGY_LIFE=4
uint8 POWER_SUPPLY_TECHNOLOGY_NICD=5
uint8 POWER_SUPPLY_TECHNOLOGY_LIMN=6
std_msgs/Header header
  uint32 seq
  time stamp
  string frame_id
float32 voltage
float32 temperature
float32 current
float32 charge
float32 capacity
float32 design_capacity
float32 percentage
uint8 power_supply_status
uint8 power_supply_health
uint8 power_supply_technology
bool present
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  # Pseudo-constants
  POWER_SUPPLY_STATUS_UNKNOWN = 0
  POWER_SUPPLY_STATUS_CHARGING = 1
  POWER_SUPPLY_STATUS_DISCHARGING = 2
  POWER_SUPPLY_STATUS_NOT_CHARGING = 3
  POWER_SUPPLY_STATUS_FULL = 4
  POWER_SUPPLY_HEALTH_UNKNOWN = 0
  POWER_SUPPLY_HEALTH_GOOD = 1
  POWER_SUPPLY_HEALTH_OVERHEAT = 2
  POWER_SUPPLY_HEALTH_DEAD = 3
  POWER_SUPPLY_HEALTH_OVERVOLTAGE = 4
  POWER_SUPPLY_HEALTH_UNSPEC_FAILURE = 5
  POWER_SUPPLY_HEALTH_COLD = 6
  POWER_SUPPLY_HEALTH_WATCHDOG_TIMER_EXPIRE = 7
  POWER_SUPPLY_HEALTH_SAFETY_TIMER_EXPIRE = 8
  POWER_SUPPLY_TECHNOLOGY_UNKNOWN = 0
  POWER_SUPPLY_TECHNOLOGY_NIMH = 1
  POWER_SUPPLY_TECHNOLOGY_LION = 2
  POWER_SUPPLY_TECHNOLOGY_LIPO = 3
  POWER_SUPPLY_TECHNOLOGY_LIFE = 4
  POWER_SUPPLY_TECHNOLOGY_NICD = 5
  POWER_SUPPLY_TECHNOLOGY_LIMN = 6

  __slots__ = ['header','seq','stamp','frame_id','voltage','temperature','current','charge','capacity','design_capacity','percentage','power_supply_status','power_supply_health','power_supply_technology','present']
  _slot_types = ['std_msgs/Header','uint32','time','string','float32','float32','float32','float32','float32','float32','float32','uint8','uint8','uint8','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,seq,stamp,frame_id,voltage,temperature,current,charge,capacity,design_capacity,percentage,power_supply_status,power_supply_health,power_supply_technology,present

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(BatteryState, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.seq is None:
        self.seq = 0
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.frame_id is None:
        self.frame_id = ''
      if self.voltage is None:
        self.voltage = 0.
      if self.temperature is None:
        self.temperature = 0.
      if self.current is None:
        self.current = 0.
      if self.charge is None:
        self.charge = 0.
      if self.capacity is None:
        self.capacity = 0.
      if self.design_capacity is None:
        self.design_capacity = 0.
      if self.percentage is None:
        self.percentage = 0.
      if self.power_supply_status is None:
        self.power_supply_status = 0
      if self.power_supply_health is None:
        self.power_supply_health = 0
      if self.power_supply_technology is None:
        self.power_supply_technology = 0
      if self.present is None:
        self.present = False
    else:
      self.header = std_msgs.msg.Header()
      self.seq = 0
      self.stamp = genpy.Time()
      self.frame_id = ''
      self.voltage = 0.
      self.temperature = 0.
      self.current = 0.
      self.charge = 0.
      self.capacity = 0.
      self.design_capacity = 0.
      self.percentage = 0.
      self.power_supply_status = 0
      self.power_supply_health = 0
      self.power_supply_technology = 0
      self.present = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.seq, _x.stamp.secs, _x.stamp.nsecs))
      _x = self.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7f4B().pack(_x.voltage, _x.temperature, _x.current, _x.charge, _x.capacity, _x.design_capacity, _x.percentage, _x.power_supply_status, _x.power_supply_health, _x.power_supply_technology, _x.present))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.stamp is None:
        self.stamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.seq, _x.stamp.secs, _x.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.frame_id = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.voltage, _x.temperature, _x.current, _x.charge, _x.capacity, _x.design_capacity, _x.percentage, _x.power_supply_status, _x.power_supply_health, _x.power_supply_technology, _x.present,) = _get_struct_7f4B().unpack(str[start:end])
      self.present = bool(self.present)
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.seq, _x.stamp.secs, _x.stamp.nsecs))
      _x = self.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7f4B().pack(_x.voltage, _x.temperature, _x.current, _x.charge, _x.capacity, _x.design_capacity, _x.percentage, _x.power_supply_status, _x.power_supply_health, _x.power_supply_technology, _x.present))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.stamp is None:
        self.stamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.seq, _x.stamp.secs, _x.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.frame_id = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.voltage, _x.temperature, _x.current, _x.charge, _x.capacity, _x.design_capacity, _x.percentage, _x.power_supply_status, _x.power_supply_health, _x.power_supply_technology, _x.present,) = _get_struct_7f4B().unpack(str[start:end])
      self.present = bool(self.present)
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_7f4B = None
def _get_struct_7f4B():
    global _struct_7f4B
    if _struct_7f4B is None:
        _struct_7f4B = struct.Struct("<7f4B")
    return _struct_7f4B
